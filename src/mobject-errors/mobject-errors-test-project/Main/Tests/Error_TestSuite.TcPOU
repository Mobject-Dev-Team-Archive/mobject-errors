<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Error_TestSuite" Id="{a0257640-79d7-4989-a8b2-5eb7ba391d90}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Error_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAccept();
TestErrorType();
TestIsSameAsWithSameErrors();
TestIsSameAsWithDifferentErrors();
TestMessage();
TestSerializeWith();]]></ST>
    </Implementation>
    <Method Name="TestAccept" Id="{b044983a-1e30-46ea-beb2-c1ea13da718b}">
      <Declaration><![CDATA[METHOD PUBLIC TestAccept
VAR
	error : MockError(MockErrorType:='',MockMessage:='');
	visitor : MockVisitor(ExpectedError := error);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAccept');

error.Accept(visitor);

AssertTrue(
	Condition := visitor.VisitedCorrectError,
	Message := 'Did not invoke VisitError on the visitor'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestErrorType" Id="{d4ccd3cb-30bb-4cec-8623-16d2143b6718}">
      <Declaration><![CDATA[METHOD PUBLIC TestErrorType
VAR
	error : MockError(MockErrorType:='TestErrorType123',MockMessage:='');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestErrorType');

AssertEquals_String(
	Actual := error.ErrorType,
	Expected := 'TestErrorType123',
	Message := 'Did not return the expected ErrorType'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithDifferentErrors" Id="{ca1ce938-c970-4662-8ee1-7f10cf426b80}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithDifferentErrors
VAR
	error1 : MockError(MockErrorType:='ERROR_TYPE_A',MockMessage:='Message 1');
	error2 : MockError(MockErrorType:='ERROR_TYPE_B',MockMessage:='Message 2');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithDifferentErrors');

AssertFalse(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being different type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithSameErrors" Id="{f8782e74-34f8-4983-92fd-8f2103b015b1}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithSameErrors
VAR
	error1 : MockError(MockErrorType:='ERROR_TYPE_A',MockMessage:='Message 1');
	error2 : MockError(MockErrorType:='ERROR_TYPE_A',MockMessage:='Message 2');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithSameErrors');

AssertTrue(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being the same type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMessage" Id="{892ba3fa-c165-495e-baee-502fe3c75b25}">
      <Declaration><![CDATA[METHOD PUBLIC TestMessage
VAR
	error : MockError(MockErrorType:='',MockMessage:='TestMessage123');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMessage');

AssertEquals_String(
	Actual := error.Message,
	Expected := 'TestMessage123',
	Message := 'Did not return the expected Message'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{9338d1d2-0411-4a5e-82f4-55e64ea8e615}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
	error : MockError(MockErrorType:='test1',MockMessage:='test2');
	serializer : MockJsonSerializer;
	result : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

error.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(result), SIZEOF(result));

AssertEquals_String(
	Actual := result,
	Expected := '{"errorType":"test1","message":"test2"}',
	Message := 'Did not serialize correctly'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>